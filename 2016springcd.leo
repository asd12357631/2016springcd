<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<?xml-stylesheet ekr_test ?>
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="leo.20160303092725.2"><vh>@edit w2_1</vh></v>
<v t="leo.20160303092911.1"><vh>@edit.index.html</vh></v>
<v t="leo.20160303110023.1" a="E"><vh>cd</vh>
<v t="leo.20160303111406.1" a="E"><vh>2b</vh>
<v t="leo.20160303111406.2"><vh>@edit 2016_cd_2b_1.txt</vh></v>
<v t="leo.20160303111406.3"><vh>@edit 2016_cd_2b_2.txt</vh></v>
<v t="leo.20160303111406.4"><vh>@edit 2016_cd_2b_3.txt</vh></v>
<v t="leo.20160303111406.5"><vh>@edit 2016s_g1_w1_task0_2b.py</vh></v>
<v t="leo.20160303111406.6"><vh>@edit 2016s_g1_w1_task0-1_2b.py</vh></v>
<v t="leo.20160303111406.7"><vh>2b 分組執行結果 (python 程式)</vh></v>
<v t="leo.20160303111406.8"><vh>2b 分組執行結果</vh></v>
<v t="leo.20160303111406.9"><vh>@edit 2b_2016spring.html</vh></v>
<v t="leo.20160303111406.10"><vh>列出依學號排序的組的座位表</vh></v>
</v>
</v>
<v t="leo.20160303110039.1"><vh></vh></v>
</vnodes>
<tnodes>
<t tx="leo.20160303110023.1"></t>
<t tx="leo.20160303110039.1"></t>
<t tx="leo.20160303111406.1"></t>
<t tx="leo.20160303111406.10">('40123126', (0, 0))
('40123129', (1, 3))
('40123131', (2, 6))
('40123133', (4, 1))
('40123134', (5, 4))
('40123144', (6, 7))
('40123156', (8, 1))
('40123202', (0, 1))
('40123214', (1, 4))
('40123217', (2, 7))
('40123224', (0, 2))
('40123226', (4, 2))
('40123232', (5, 5))
('40123235', (7, 0))
('40123239', (1, 5))
('40123242', (3, 0))
('40123244', (8, 2))
('40123250', (4, 3))
('40323201', (0, 3))
('40323202', (1, 6))
('40323203', (3, 1))
('40323204', (0, 4))
('40323205', (4, 4))
('40323206', (1, 7))
('40323208', (5, 7))
('40323210', (0, 5))
('40323211', (2, 0))
('40323212', (0, 6))
('40323213', (0, 7))
('40323214', (1, 0))
('40323215', (3, 3))
('40323216', (2, 1))
('40323217', (3, 2))
('40323218', (2, 3))
('40323219', (3, 4))
('40323220', (4, 6))
('40323222', (1, 1))
('40323223', (1, 2))
('40323225', (2, 5))
('40323226', (2, 2))
('40323227', (2, 4))
('40323229', (3, 5))
('40323230', (3, 6))
('40323231', (5, 1))
('40323232', (6, 4))
('40323233', (7, 6))
('40323234', (5, 6))
('40323235', (6, 1))
('40323236', (4, 7))
('40323237', (5, 0))
('40323238', (7, 1))
('40323239', (6, 3))
('40323240', (4, 0))
('40323241', (3, 7))
('40323242', (7, 5))
('40323243', (5, 2))
('40323244', (8, 3))
('40323245', (5, 3))
('40323247', (6, 6))
('40323248', (7, 3))
('40323249', (6, 5))
('40323250', (8, 4))
('40323251', (4, 5))
('40323252', (8, 0))
('40323253', (6, 0))
('40323254', (6, 2))
('40323255', (7, 2))
('40323256', (7, 4))
('40328242', (7, 7))
('40328245', (8, 5))</t>
<t tx="leo.20160303111406.7">@language python
# spring_2b 數列即為執行 2016s_g1_w1_task0_2b.py 之後, 所得到的 final_result 數列
# 這個數列是帶有空白字串的分組學號名單數列的組合數列
# readlines() 會以每一行資料當作一個字串, 作為 element, 並輸出一個數列資料
result = []
with open("2016_cd_2b_3.txt", 'r') as f:
    content = f.readlines()
    #g.es(content)
    #g.es(len(content))
    # 逐 element 處理
    for i in range(len(content)):
        for line in content[i].splitlines():
            #g.es(content[i].splitlines())
            result.append(list(line.split(",")))
# result element 即為各分組的學員學號數列資料
# 這裡要先以遞增排序處理各組的數列
group_sorted = []
for i in range(len(result)):
    group_list = sorted(list(filter(None, result[i])))
    group_sorted.append(group_list)
#g.es("各組已經過遞增排序, 各組第一位即為組長:", group_sorted)
# 利用 sorted(), 對全班各組數列所組成的數列進行遞增排序
final_result = sorted(group_sorted)
g.es("分組結果:", final_result)

'''
分組結果: [['40123126', '40123129', '40123131', '40123133', '40123134', '40123144', '40123156'], 
['40123202', '40123214', '40123217', '40123226', '40123232', '40123235', '40123244'], 
['40123224', '40123239', '40123242', '40123250', '40323234', '40323238'], 
['40323201', '40323202', '40323203', '40323205', '40323208'], 
['40323204', '40323206', '40323217', '40323251', '40323253', '40323255'], 
['40323210', '40323211', '40323215', '40323220', '40323235', '40323248'], 
['40323212', '40323216', '40323219', '40323236', '40323254', '40323256'], 
['40323213', '40323226', '40323229', '40323237', '40323239', '40323242', '40323244'], 
['40323214', '40323218', '40323230', '40323231', '40323232', '40323233', '40323250'], 
['40323222', '40323227', '40323241', '40323243', '40323249', '40328242', '40328245'], 
['40323223', '40323225', '40323240', '40323245', '40323247', '40323252']]
'''

spring_2b =  final_result

# 第 i 組學號數列 為 spring_2a[i-1], i 從 1 到 11 共有 11 組
# 若要先照排依組序排座位, 且空字串由下一組可用學號補上
# 以排為先, 然後列, 共有 9 排 8 列可以排座位

seat_by_column = []
for row in range(7):
    for column in range(11):
        # 因為各分組數列的長度並不相同, 但是最長的有 8 位組員, 因此若無法取得的資料 (因為索引超值), 就補上空字串
        try:
            seat_by_column.append(spring_2b[column][row])
        except:
            seat_by_column.append("")

g.es("去除空白字串前的座位數列:", seat_by_column)

'''
去除空白字串前的座位數列: ['40123126', '40123202', '40123224', '40323201', '40323204', '40323210', '40323212', '40323213', '40323214', '40323222', '40323223', '40123129', '40123214', '40123239', '40323202', '40323206', '40323211', '40323216', '40323226', '40323218', '40323227', '40323225', '40123131', '40123217', '40123242', '40323203', '40323217', '40323215', '40323219', '40323229', '40323230', '40323241', '40323240', '40123133', '40123226', '40123250', '40323205', '40323251', '40323220', '40323236', '40323237', '40323231', '40323243', '40323245', '40123134', '40123232', '40323234', '40323208', '40323253', '40323235', '40323254', '40323239', '40323232', '40323249', '40323247', '40123144', '40123235', '40323238', '', '40323255', '40323248', '40323256', '40323242', '40323233', '40328242', '40323252', '40123156', '40123244', '', '', '', '', '', '40323244', '40323250', '40328245', '']
'''

# 然後利用 filter(None, seat_by_column) 去除空白字串, 就可以得到以 column 為主的座位排序

seat_by_column = list(filter(None, seat_by_column))
# 以排為主的座位數列
#g.es("以排為主的座位數列:", seat_by_column)

'''
以排為主的座位數列: ['40123126', '40123202', '40123224', '40323201', '40323204', '40323210', '40323212', '40323213', '40323214', '40323222', '40323223', '40123129', '40123214', '40123239', '40323202', '40323206', '40323211', '40323216', '40323226', '40323218', '40323227', '40323225', '40123131', '40123217', '40123242', '40323203', '40323217', '40323215', '40323219', '40323229', '40323230', '40323241', '40323240', '40123133', '40123226', '40123250', '40323205', '40323251', '40323220', '40323236', '40323237', '40323231', '40323243', '40323245', '40123134', '40123232', '40323234', '40323208', '40323253', '40323235', '40323254', '40323239', '40323232', '40323249', '40323247', '40123144', '40123235', '40323238', '40323255', '40323248', '40323256', '40323242', '40323233', '40328242', '40323252', '40123156', '40123244', '40323244', '40323250', '40328245']
'''

# 然後每 8 個取為 1 排, 即可得到以排為主的座位序列

N = 8
column_list = [seat_by_column[n:n+N] for n in range(0, len(seat_by_column), N)]
# 列出每 8 個組員一排的數列
#g.es("每 8 個組員一排的數列:", column_list)
# 根據 column_list, 建立一個 dictionary, 其中學號為 index, 座位號為對應值
seat_dict = {}
for column in range(len(column_list)):
    for i in range(8):
        try:
            seat_dict.update({column_list[column][i]: (column, i)})
        except:
            seat_dict.update({"": ""})
# 根據學號, 排序 dictionary 的方法
import operator
seat_dict_sort = sorted(seat_dict.items(), key = operator.itemgetter(0), reverse = False)

# 依照學號順序, 列出座位表
for i in range(len(seat_dict_sort)):
    g.es(seat_dict_sort[i])

'''
# 以排為主, 將 seat_by_column 數列, 以每 8 個一排, 組成座位數列
# (1,1), (1, 2) to (9, 1)
每 8 個組員一排的數列: 
[['40123126', '40123202', '40123224', '40323201', '40323204', '40323210', '40323212', '40323213'], 
['40323214', '40323222', '40323223', '40123129', '40123214', '40123239', '40323202', '40323206'], 
['40323211', '40323216', '40323226', '40323218', '40323227', '40323225', '40123131', '40123217'], 
['40123242', '40323203', '40323217', '40323215', '40323219', '40323229', '40323230', '40323241'], 
['40323240', '40123133', '40123226', '40123250', '40323205', '40323251', '40323220', '40323236'], 
['40323237', '40323231', '40323243', '40323245', '40123134', '40123232', '40323234', '40323208'], 
['40323253', '40323235', '40323254', '40323239', '40323232', '40323249', '40323247', '40123144'], 
['40123235', '40323238', '40323255', '40323248', '40323256', '40323242', '40323233', '40328242'], 
['40323252', '40123156', '40123244', '40323244', '40323250', '40328245']]
# 若要轉換為以 row 為主的電腦教室數列, 以方便 html table 處理, 則需要利用 zip 進行 transpose
# (9,1)-&gt;(1,1), (8,1)-&gt;(1,2) ... (1,1)-&gt;(1,9)
'''

# dont know why .reverse() did not work, 只有 [::-1] 可以 reverse list elements
#g.es(column_list[::-1])

# 因為經由 zip 逐一重新 transpose 的列資料, 必須配合最大 (也就是總共有 7 列) 列數補上空白字串 (也就是空位)
# 所以不能使用 zip, 而必須導入 zip_longest 模組方法

from itertools import zip_longest

# zip list of lists, 特別注意下列 column_list 前方的 *

'''
The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in range() function expects separate start and stop arguments. If they are not available separately, write the function call with the *-operator to unpack the arguments out of a list or tuple: 

https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments
'''

spring_2b_final_seat = list(zip_longest(*column_list[::-1], fillvalue=""))
# 列出最後的座位
#g.es(spring_2b_final_seat)

# 最後轉成 html table 標註格式

g.es("&lt;table&gt;")
for row in range(len(spring_2b_final_seat)):
    g.es("&lt;tr&gt;")
    # 因為每一 row 有 9 個位子
    for i in range(9):
        g.es("&lt;td&gt;", spring_2b_final_seat[row][i], "&lt;/td&gt;")
    g.es("&lt;/tr&gt;")
g.es("&lt;/table&gt;")
    

'''
# 最後得到的結果, 可以利用 html table 顯示在網頁上, 也就是以列為主的座位名單數列
[('40323252', '40123235', '40323253', '40323237', '40323240', '40123242', '40323211', '40323214', '40123126'), ('40123156', '40323238', '40323235', '40323231', '40123133', '40323203', '40323216', '40323222', '40123202'), ('40123244', '40323255', '40323254', '40323243', '40123226', '40323217', '40323226', '40323223', '40123224'), ('40323244', '40323248', '40323239', '40323245', '40123250', '40323215', '40323218', '40123129', '40323201'), ('40323250', '40323256', '40323232', '40123134', '40323205', '40323219', '40323227', '40123214', '40323204'), ('40328245', '40323242', '40323249', '40123232', '40323251', '40323229', '40323225', '40123239', '40323210'), ('', '40323233', '40323247', '40323234', '40323220', '40323230', '40123131', '40323202', '40323212'), ('', '40328242', '40123144', '40323208', '40323236', '40323241', '40123217', '40323206', '40323213')]
'''


</t>
<t tx="leo.20160303111406.8">第1組: ['40123126', '40123129', '40123131', '40123133', '40123134', '40123144', '40123156']
第2組: ['40123202', '40123214', '40123217', '40123226', '40123232', '40123235', '40123244']
第3組: ['40123224', '40123239', '40123242', '40123250', '40323234', '40323238']
第4組: ['40323201', '40323202', '40323203', '40323205', '40323208']
第5組: ['40323204', '40323206', '40323217', '40323251', '40323253', '40323255']
第6組: ['40323210', '40323211', '40323215', '40323220', '40323235', '40323248']
第7組: ['40323212', '40323216', '40323219', '40323236', '40323254', '40323256']
第8組: ['40323213', '40323226', '40323229', '40323237', '40323239', '40323242', '40323244']
第9組: ['40323214', '40323218', '40323230', '40323231', '40323232', '40323233', '40323250']
第10組: ['40323222', '40323227', '40323241', '40323243', '40323249', '40328242', '40328245']
第11組: ['40323223', '40323225', '40323240', '40323245', '40323247', '40323252']</t>
</tnodes>
</leo_file>
